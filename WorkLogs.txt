1. The prerequisite of programming is: 
        --> a clear mind
        --> a healthy body
        --> energy.
2. Keep code reuse in mind.
3. Learn from the other programmers.
4. The more complicated the programming concepts are, the slower the development processes. Kepp it simple.
5. Problem A is simple, Problem B is simple, Problem C is simple, but it can be very difficult when putting Problem A, B, C together.
    So, the best way is:
      a. For a simple problem, not only solve it but also investigate it
      b. For a complicated problem, divide it into several familar simple problems
6. In a 3-tier architecture, remember to always keep consisitent between the object in memory and in the database table.
7. There're a lot of coinsidences in programming, it's the X factor.
8. Give up .NET and any other Microsfot technologies, shift to Linux + C + Objective C + Script, get some certs on Linux
9. Don't write any logics inside a stored procedure, it's very difficult to find out a bug inside a stored procedure.
10. The smaller the scope of a variable is, the safer the codes are; the small the sql-server transaction is, the safer the database operation is.
11. Code refactoring, is the process of restructuring existing computer code-- changing the factoring -- without changing its external behavior. Refactoring imporves non-functional attributes of the software. Advantages include imporved code readability and reduced complexity to imporve source code maintainability, and create a more experssive architecture or object model to imporve extensibility.
12. A plan is going to be changed many times before it's really practical.
13. Using an unproper name for a variable / method / class is a bug, and it'll cause many bugs.
14. The vairables in memory are difficult to debug, it's better to write a good document for every function which operates and changes object status in memory.
15. One will improve faster if he test his own codes carefully and produces high quanlity software.
16. No matter it's OOS or Proprietary technology, the one which can ship good products is a good technology.
17. Don't limit myself to one type of technology, always learn from different kinds of technology, either Java, C++, C, Python, Javascript, Windows, Linux, Android, iOS...
18. Never give up .NET technology, because I've already contribute so many years to it, and it's really not bad.
19. Never write tricky codes, it's a disaster.
20. Be very careful that in C#, String is very much different from StringBuilder, it's very different from any other reference type variables.
    String is said to be reference type, you can use string1 = string2 to assign the "content" of string2 to string1, but their address are still different.
	Change string1 will not affact string2, chang string2 will also not affact string1.
21. Writing high quanlity codes is more important than mastring more technologies.
22. In the engineering field, you cannot wait untill you have "mastered" everything before 
    starting a project, it is impossible; It's also unwise to start doing a project without 
	any knowledge, but by trying here and there like blind. It's a wisdom to keep a balance point
	between the two extremas.
23. Unit testing is very important, IT CAN SAVE YOUR TIME. Not saying in some environments you don't have a debugger, 
    Unit Testing is the only way to debug.
24. The key variable is the emotion, which will destory all plans, which makes plan impossible.
25. Don't just rely on the debugger, try to find the defects by anlysising the logic by yourself.
26. ExecuteNonQuery requires the command to have a transaction when the connection assigned to the command is in a pending local transaction.
27. References are polymorphic, an object reference can be:
    a. Implicitly upcast to a base class reference
	  a1. An upcast operation creates a basc class reference from a subclass reference.
	  a2. After the upcast, the variable still references the same subclass object.
	  a3. The referenced object is not affected.
	b. Explicity downcast to a subclass reference
	  b1. A downcast operation creates a subclass reference from a base class reference.
	  b2. A downcast requires an explict cast because it can prtentially fail at runtime.
	  b3. The referenced object is not affacted.
	  b4. If a downcast fails, an InvalidCastException is thrown.
28. 
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	
      